extern "C" {
#include "gvcp_redline.h"
#include "redline_err.h"
}

#include "redline_manager.hpp"

extern "C" {

REDLINE_SOLIDIFY_PARAM_T* redline_get_solid_param() {
    // 安全起见：不直接暴露内部镜像指针（避免外界写坏）
    // 如你确实需要，可在 RedlineStore 再提供一个只读快照函数。
    return nullptr;
}

int redline_set_flash_solid_param() { return RedlineManager::Instance().SaveSolidParams(); }
int redline_get_flash_solid_param() { return RedlineManager::Instance().LoadSolidParams(); }

uint8_t redline_get_active_sts() { return RedlineManager::Instance().GetActiveSts(); }
uint8_t redline_get_lock_sts()   { return RedlineManager::Instance().GetLockSts(); }
uint16_t redline_get_lock_time() { return RedlineManager::Instance().GetLockTime(); }

int redline_get_login_sts()      { return RedlineManager::Instance().GetLoginSts(); }
int redline_set_login_sts(int s) { return RedlineManager::Instance().SetLoginSts(s); }
int redline_get_auth_sts()       { return RedlineManager::Instance().GetAuthSts(); }
int redline_get_upg_auth_sts()   { return RedlineManager::Instance().GetUpgAuthSts(); }

const uint8_t* redline_get_init_dropbear_cmd() { return RedlineManager::Instance().GetInitDropbearCmd(); }

void redline_cookie_monitor_thread() { RedlineManager::Instance().StartCookieMonitor(); }
void redline_update_cookie(char* ck) { RedlineManager::Instance().UpdateCookie(ck); }

bool redline_is_sup_reg_operation() { return RedlineManager::Instance().IsSupRegOperation(); }

// —— GVCP 命令处理 —— //
int gvcp_proc_redline_interchange_cmd(const struct gvcp_packet* r, struct gvcp_packet* a,
                                      unsigned short id, int* sz, int broadcast) {
    return RedlineManager::Instance().HandleInterchange(r, a, id, sz, broadcast != 0);
}
int gvcp_proc_redline_active_cmd(const struct gvcp_packet* r, struct gvcp_packet* a,
                                 unsigned short id, int* sz) {
    return RedlineManager::Instance().HandleActive(r, a, id, sz);
}
int gvcp_proc_redline_retore_cmd(const struct gvcp_packet* r, struct gvcp_packet* a,
                                 unsigned short id, int* sz) {
    return RedlineManager::Instance().HandleRestore(r, a, id, sz);
}
int gvcp_proc_redline_login_cmd(const struct gvcp_packet* r, struct gvcp_packet* a,
                                unsigned short id, int* sz, int broadcast) {
    return RedlineManager::Instance().HandleLogin(r, a, id, sz, broadcast != 0);
}
int gvcp_proc_redline_changepwd_cmd(const struct gvcp_packet* r, struct gvcp_packet* a,
                                    unsigned short id, int* sz) {
    return RedlineManager::Instance().HandleChangePwd(r, a, id, sz);
}
int gvcp_proc_redline_changepIP_cmd(const struct gvcp_packet* r, struct gvcp_packet* a,
                                    unsigned short id, int* sz) {
    return RedlineManager::Instance().HandleChangeIP(r, a, id, sz);
}
int gvcp_proc_redline_resetpwd_cmd(const struct gvcp_packet* r, struct gvcp_packet* a,
                                   unsigned short id, int* sz, ip_addr_t peer_ip) {
    return RedlineManager::Instance().HandleResetPwd(r, a, id, sz, peer_ip);
}
int gvcp_proc_redline_upg_cmd(const struct gvcp_packet* r, struct gvcp_packet* a,
                              unsigned short id, int* sz) {
    return RedlineManager::Instance().HandleUpgrade(r, a, id, sz);
}
int gvcp_proc_redline_getdevinfo_cmd(const struct gvcp_packet* r, struct gvcp_packet* a,
                                     unsigned short id, int* sz) {
    return RedlineManager::Instance().HandleGetDevInfo(r, a, id, sz);
}
int gvcp_proc_redline_getlockinfo_cmd(const struct gvcp_packet* r, struct gvcp_packet* a,
                                      unsigned short id, int* sz, int broadcast) {
    return RedlineManager::Instance().HandleGetLockInfo(r, a, id, sz, broadcast != 0);
}
int gvcp_proc_redline_default_active(void) {
    return RedlineManager::Instance().DefaultActive();
}

} // extern "C"