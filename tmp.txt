// ... (其他部分，包括 ThreadInfo, helper functions, os_get_pid_by_name 保持不变) ...

// --- 插件核心函数 ---
int thread_plugin_flush_cpp(const char *target_process_name) {
    pid_t pids[10];
    int pid_count = 10;
    int ret;

    std::cout << "--- Thread Plugin (C++ V2 - Corrected Policy Index): Flushing info for process \"" << target_process_name << "\" ---" << std::endl;

    ret = os_get_pid_by_name(target_process_name, pids, &pid_count);
    if (ret != 0 || pid_count == 0) {
        std::cerr << "Error: Could not get PID for process \"" << target_process_name
                  << "\". os_get_pid_by_name returned " << ret << ", pid_count " << pid_count << "." << std::endl;
        if (pid_count == 0 && ret == 0) {
            std::cerr << "Process \"" << target_process_name << "\" not found." << std::endl;
        }
        return -1;
    }

    pid_t target_pid = pids[0];
    std::cout << "Target Process: " << target_process_name << " (PID: " << target_pid << ")" << std::endl;
    std::cout << "--------------------------------------------------------------------------------------------------------------------" << std::endl; // Adjusted width
    std::cout << "| " << std::left << std::setw(8) << "TID"
              << "| " << std::left << std::setw(20) << "Name"
              << "| " << std::left << std::setw(28) << "State"
              << "| " << std::left << std::setw(8) << "Nice"
              << "| " << std::left << std::setw(10) << "RT Prio" // Added RT Priority column
              << "| " << std::left << std::setw(15) << "Policy"
              << "| " << std::left << std::setw(10) << "RawPolicy" << "|" << std::endl;
    std::cout << "--------------------------------------------------------------------------------------------------------------------" << std::endl; // Adjusted width


    std::string task_path_str = "/proc/" + std::to_string(target_pid) + "/task";
    DIR *dir = opendir(task_path_str.c_str());
    if (!dir) {
        perror("Error opening task directory");
        std::cerr << "Failed to open: " << task_path_str << " (PID: " << target_pid
                  << "). Do you have permissions? Is the process running?" << std::endl;
        return -1;
    }

    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) {
        if (entry->d_type == DT_DIR) {
            char *endptr;
            long tid_long = strtol(entry->d_name, &endptr, 10);
            if (*endptr == '\0') {
                pid_t tid = static_cast<pid_t>(tid_long);
                ThreadInfo info;
                info.tid = tid;
                info.nice_val = 0;
                info.policy_val = -1; // Default to indicate error or not found
                info.state_char = '?';
                long rt_priority_val = 0; // Store RT Priority

                std::string comm_path_str = task_path_str + "/" + entry->d_name + "/comm";
                std::ifstream comm_file(comm_path_str);
                if (comm_file.is_open()) {
                    std::getline(comm_file, info.name);
                    comm_file.close();
                } else {
                    info.name = "N/A";
                }

                std::string stat_path_str = task_path_str + "/" + entry->d_name + "/stat";
                std::ifstream stat_file(stat_path_str);
                if (stat_file.is_open()) {
                    std::string line;
                    std::getline(stat_file, line);
                    stat_file.close();

                    std::stringstream ss(line);
                    std::vector<std::string> fields;
                    std::string field_val_str;
                    while (ss >> field_val_str) {
                        fields.push_back(field_val_str);
                    }
                    
                    // Field indices (0-based for vector from 1-based man page)
                    // fields[2]  (Man page field 3): state
                    // fields[18] (Man page field 19): nice
                    // fields[39] (Man page field 40): rt_priority  <-- CORRECTED
                    // fields[40] (Man page field 41): policy       <-- CORRECTED

                    if (fields.size() > 2) {
                        info.state_char = fields[2][0];
                    }

                    if (fields.size() > 18) {
                        try { info.nice_val = std::stol(fields[18]); }
                        catch (const std::exception&) { info.nice_val = -999; }
                    }

                    // Read Real-Time Priority (field 40, index 39)
                    if (fields.size() > 39) {
                         try { rt_priority_val = std::stol(fields[39]); }
                         catch (const std::exception&) { rt_priority_val = -999; } // Error parsing rt_priority
                    }

                    // Read Policy (field 41, index 40)  <--- *** THIS IS THE CRITICAL FIX ***
                    if (fields.size() > 40) {
                         try { info.policy_val = std::stol(fields[40]); } // Use fields[40]
                         catch (const std::exception&) { /* info.policy_val remains -1 */ }
                    } else {
                        // Not enough fields to get policy
                        // std::cerr << "Warning: Not enough fields in stat for TID " << tid << " to get policy. Fields available: " << fields.size() << std::endl;
                    }
                }
                
                info.state_str = get_thread_state_str_cpp(info.state_char);
                info.policy_str = get_scheduler_policy_str_cpp(info.policy_val);

                std::cout << "| " << std::left << std::setw(8) << info.tid
                          << "| " << std::left << std::setw(20) << info.name
                          << "| " << std::left << std::setw(28) << (info.state_str + " ('" + info.state_char + "')")
                          << "| " << std::left << std::setw(8) << info.nice_val
                          << "| " << std::left << std::setw(10) << rt_priority_val // Display RT Prio
                          << "| " << std::left << std::setw(15) << info.policy_str
                          << "| " << std::left << std::setw(10) << info.policy_val << "|" << std::endl;
            }
        }
    }
    closedir(dir);
    std::cout << "--------------------------------------------------------------------------------------------------------------------" << std::endl; // Adjusted width
    std::cout << "--- Thread Plugin (C++ V2 - Corrected Policy Index): Flush complete ---" << std::endl << std::endl;
    return 0;
}

// Ensure the main function (if you're using the test main) and other helper functions
// (get_thread_state_str_cpp, get_scheduler_policy_str_cpp, os_get_pid_by_name)
// are included when you compile.
