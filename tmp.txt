// src/redline_manager.hpp
#pragma once
extern "C" {
#include "gvcp_redline.h"
#include "redline_err.h"
}
#include <array>
#include <atomic>
#include <cstdint>
#include <mutex>
#include <thread>
#include <chrono>

class RedlineManager {
public:
    static RedlineManager& Instance();

    // 固化存取
    int LoadSolidParams();
    int SaveSolidParams();

    // 设备/登录/锁定状态读取
    uint8_t  GetActiveSts() const;
    uint8_t  GetLockSts() const;
    uint16_t GetLockTime() const;

    int  GetLoginSts() const;
    int  SetLoginSts(int sts);
    int  GetAuthSts() const;
    int  GetUpgAuthSts() const;

    const uint8_t* GetInitDropbearCmd() const;
    bool IsSupRegOperation() const;

    // Cookie 维护
    void StartCookieMonitor();
    void UpdateCookie(const char* cookie);

    // GVCP 命令处理（对外C API转调）
    int HandleInterchange(const gvcp_packet* req, gvcp_packet* ack,
                          unsigned short pkt_id, int* size, bool broadcast);
    int HandleActive(const gvcp_packet* req, gvcp_packet* ack,
                     unsigned short pkt_id, int* size);
    int HandleRestore(const gvcp_packet* req, gvcp_packet* ack,
                      unsigned short pkt_id, int* size);
    int HandleLogin(const gvcp_packet* req, gvcp_packet* ack,
                    unsigned short pkt_id, int* size, bool broadcast);
    int HandleChangePwd(const gvcp_packet* req, gvcp_packet* ack,
                        unsigned short pkt_id, int* size);
    int HandleChangeIP(const gvcp_packet* req, gvcp_packet* ack,
                       unsigned short pkt_id, int* size);
    int HandleResetPwd(const gvcp_packet* req, gvcp_packet* ack,
                       unsigned short pkt_id, int* size, ip_addr_t peer_ip);
    int HandleUpgrade(const gvcp_packet* req, gvcp_packet* ack,
                      unsigned short pkt_id, int* size);
    int HandleGetDevInfo(const gvcp_packet* req, gvcp_packet* ack,
                         unsigned short pkt_id, int* size);
    int HandleGetLockInfo(const gvcp_packet* req, gvcp_packet* ack,
                          unsigned short pkt_id, int* size, bool broadcast);
    int DefaultActive();

    // A/B互斥
    bool TryAcquireSession();
    void ReleaseSession();
    bool HasActiveSession() const;

private:
    RedlineManager();
    ~RedlineManager();

    RedlineManager(const RedlineManager&) = delete;
    RedlineManager& operator=(const RedlineManager&) = delete;

    void cookieThreadLoop_();
    bool isLocked_() const;
    void punishOnLoginFail_();
    void clearLoginFail_();

private:
    mutable std::mutex mtx_;
    REDLINE_SOLIDIFY_PARAM_T solid_{};
    REDLINE_DEVICE_STS_T     dev_{};
    REDLINE_COOKIE_UPDATE_T  cookie_meta_{};

    struct Session {
        bool online = false;
        uint32_t src_ip = 0;
        uint16_t src_port = 0;
        std::array<uint8_t, 16> cookie{};
        std::chrono::steady_clock::time_point cookie_update_tp{};
    } session_;

    std::thread  cookie_thr_;
    std::atomic<bool> cookie_thr_run_{false};
};