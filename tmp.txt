@startuml
title Collect模块插件体系类图（支持双向插件）

' 抽象基类，所有插件都必须实现这些接口
abstract class Plugin {
    +virtual bool init() = 0
    +virtual bool shutdown() = 0
}

' 输入插件接口：主要负责采集数据
abstract class InputPlugin {
    +virtual bool init() override
    +virtual bool read() = 0
    +virtual bool shutdown() override
}

' 输出插件接口：主要负责将数据输出到目标（日志、文件、网络等）
abstract class OutputPlugin {
    +virtual bool init() override
    +virtual bool write(const DataSet& ds, const ValueList& vl) = 0
    +virtual bool flush() = 0
    +virtual bool shutdown() override
}

' 双向插件接口：既能采集数据又能输出数据
abstract class BidirectionalPlugin {
    +virtual bool init() override
    +virtual bool read() = 0
    +virtual bool write(const DataSet& ds, const ValueList& vl) = 0
    +virtual bool flush() = 0
    +virtual bool shutdown() override
}

Plugin <|-- InputPlugin
Plugin <|-- OutputPlugin
Plugin <|-- BidirectionalPlugin
InputPlugin <|-- BidirectionalPlugin
OutputPlugin <|-- BidirectionalPlugin

' 数据结构部分

class DataSource {
    -string name
    -int type
    -double min
    -double max
}

class DataSet {
    -string type
    -int ds_num
    -vector<DataSource> ds
}

class Value {
    <<union>>
    +counter_t counter
    +gauge_t gauge
    +derive_t derive
    +absolute_t absolute
}

class ValueList {
    -vector<Value> values
    -int values_len
    -cdtime_t time
    -cdtime_t interval
    -string host
    -string plugin
    -string plugin_instance
    -string type
    -string type_instance
    -MetaData* meta
}

class NotificationMeta {
    -string name
    -enum meta_type
    -string value_string
    -int64_t value_signed
    -uint64_t value_unsigned
    -double value_double
    -bool value_boolean
    -NotificationMeta* next
}

class Notification {
    -int severity
    -cdtime_t time
    -string message
    -string host
    -string plugin
    -string plugin_instance
    -string type
    -string type_instance
    -NotificationMeta* meta
}

DataSet "1" o-- "many" DataSource : 包含
ValueList "1" o-- "many" Value : 拥有
Notification "1" o-- "many" NotificationMeta : 包含

' 插件与数据的关联（输入插件产生 ValueList；输出插件消费 ValueList）
InputPlugin "1" --> "0..*" ValueList : 采集数据生成
OutputPlugin "1" --> "0..*" ValueList : 输出数据
BidirectionalPlugin "1" --> "0..*" ValueList : 双向数据处理

' 具体插件类定义

class CPUPlugin {
    +bool init() override
    +bool read() override
    +bool shutdown() override
}
InputPlugin <|-- CPUPlugin

class NetPlugin {
    +bool init() override
    +bool read() override
    +bool shutdown() override
}
InputPlugin <|-- NetPlugin

class MemPlugin {
    +bool init() override
    +bool read() override
    +bool shutdown() override
}
InputPlugin <|-- MemPlugin

class AppPlugin {
    +bool init() override
    +bool read() override
    +bool shutdown() override
}
InputPlugin <|-- AppPlugin

class LogOutputPlugin {
    +bool init() override
    +bool write(const DataSet& ds, const ValueList& vl) override
    +bool flush() override
    +bool shutdown() override
}
OutputPlugin <|-- LogOutputPlugin

class CSVOutputPlugin {
    +bool init() override
    +bool write(const DataSet& ds, const ValueList& vl) override
    +bool flush() override
    +bool shutdown() override
}
OutputPlugin <|-- CSVOutputPlugin

@enduml