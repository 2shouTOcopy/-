# /data1/zhoufeng20/work/tmp/grpc_install/src/grpc-1.73.0/third_party/utf8_range/CMakeLists.txt

cmake_minimum_required (VERSION 3.16)
project (utf8_range C CXX)

# option() honor variables
if (POLICY CMP0077)
  cmake_policy(SET CMP0077 NEW)
endif (POLICY CMP0077)

option (utf8_range_ENABLE_TESTS "Build test suite" OFF) # <--- 修改为 OFF
option (utf8_range_ENABLE_INSTALL "Configure installation" ON)

##
# Create the lightweight C library
add_library (utf8_range
  utf8_range.c
)

##
# A heavier-weight C++ wrapper that supports Abseil.
add_library (utf8_validity utf8_range.c) # 这行保持不动，但请注意，它将 utf8_range.c 编译为 C++ 库，这不寻常

# --- 修改 set_target_properties，移除可能导致问题的变量 ---
set_target_properties(utf8_range PROPERTIES
  VERSION 1.0 # 使用固定版本号或移除此行，避免依赖 protobuf_VERSION
  OUTPUT_NAME utf8_range # <--- 移除 ${LIB_PREFIX}
)
set_target_properties(utf8_validity PROPERTIES
  VERSION 1.0 # 使用固定版本号或移除此行
  OUTPUT_NAME utf8_validity # <--- 移除 ${LIB_PREFIX}
)
# -----------------------------------------------------------

# Load Abseil dependency.
if (NOT TARGET absl::strings)
  # 定义 Abseil 源码路径，相对于当前 utf8_range 目录
  set(UTF8_RANGE_ABSL_ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../abseil-cpp")
  if (EXISTS "${UTF8_RANGE_ABSL_ROOT_DIR}/CMakeLists.txt")
    set(ABSL_ENABLE_INSTALL ${utf8_range_ENABLE_INSTALL})
    set(ABSL_PROPAGATE_CXX_STD ON)
    add_subdirectory(${UTF8_RANGE_ABSL_ROOT_DIR} third_party/abseil-cpp)
    message(STATUS "utf8_range: Manually added Abseil as subdirectory.")
  else()
    message(FATAL_ERROR "utf8_range: Abseil source not found at ${UTF8_RANGE_ABSL_ROOT_DIR}. Cannot proceed.")
  endif()
endif ()
target_link_libraries(utf8_validity PUBLIC absl::strings)

# Configure tests.
if (utf8_range_ENABLE_TESTS) # 这个条件现在是 OFF，所以下面的 GTest 逻辑不会执行
  enable_testing()

  # find_package(GTest REQUIRED) # <-- 这一行应该被跳过

  add_executable(tests utf8_validity_test.cc)
  target_link_libraries(tests utf8_validity GTest::gmock_main)

  add_test(NAME utf8_validity_test COMMAND tests)

  add_custom_target(check
    COMMAND tests
    DEPENDS tests
  )
endif ()

# Configure installation.
if (utf8_range_ENABLE_INSTALL)
  include(CMakePackageConfigHelpers)
  include(GNUInstallDirs)

  install(EXPORT ${PROJECT_NAME}-targets
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
    NAMESPACE utf8_range::
  )
  install(TARGETS utf8_validity utf8_range EXPORT ${PROJECT_NAME}-targets
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  )

  configure_package_config_file(
    cmake/${PROJECT_NAME}-config.cmake.in
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
    INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
  )
  install(FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
  )
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/utf8_range.pc.cmake
                 ${CMAKE_CURRENT_BINARY_DIR}/utf8_range.pc @ONLY)
  install(
    FILES ${CMAKE_CURRENT_BINARY_DIR}/utf8_range.pc
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")

  # Install public headers explicitly.
  install(FILES utf8_range.h utf8_validity.h
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )
endif ()
