#ifndef THREAD_PLUGIN_H
#define THREAD_PLUGIN_H

#include <string>
#include <vector>
#include <cstdint>
#include <map> // For aggregate stats by state

// 线程状态枚举 (Linux specific)
// Based on /proc/[pid]/stat, field 3 (state)
enum class ThreadState {
    RUNNING,      // R
    SLEEPING,     // S (interruptible sleep)
    DISK_SLEEP,   // D (uninterruptible disk sleep)
    ZOMBIE,       // Z
    TRACED_STOPPED, // T (stopped by job control signal or because it is being traced)
    PAGING,       // W (paging - pre-2.6 kernels)
    DEAD,         // X (should not be seen)
    IDLE,         // I (Idle kernel thread - Linux 4.14+)
    UNKNOWN
};

// 调度策略枚举 (Linux specific)
// Based on /proc/[pid]/sched, or constants from sched.h
enum class SchedulingPolicy {
    SCHED_OTHER,    // 0
    SCHED_FIFO,     // 1
    SCHED_RR,       // 2
    SCHED_BATCH,    // 3
    SCHED_ISO,      // 4 (deprecated)
    SCHED_IDLE,     // 5
    SCHED_DEADLINE, // 6
    UNKNOWN
};

struct ThreadInfo {
    // 1. 基础线程信息
    int32_t id;                       // 线程ID (TID)
    std::string name;                 // 线程名称 (comm)
    ThreadState state;                // 线程状态
    long priority;                    // 优先级 (from /proc/[pid]/task/[tid]/stat, field 18)
    long nice_value;                  // Nice值 (from /proc/[pid]/task/[tid]/stat, field 19)
    SchedulingPolicy policy;          // 调度策略

    // 2. CPU 和资源占用
    double cpu_usage_user_avg_percent; // 平均CPU使用率 (用户态百分比, 自进程启动以来)
    double cpu_usage_system_avg_percent; // 平均CPU使用率 (内核态百分比, 自进程启动以来)
    uint64_t runtime_user_ms;         // 用户态CPU耗时 (毫秒)
    uint64_t runtime_system_ms;       // 内核态CPU耗时 (毫秒)
    uint64_t memory_stack_kb;         // 栈大小 (KB, VmStk from status)
    // 共享内存通常是进程级别的，此处不单独列出线程的贡献
    int open_files_count;             // 打开的文件描述符数量

    // 3. 阻塞与锁状态
    // std::vector<std::string> held_locks; // 难以从/proc获取，留空
    // std::string waiting_for_lock;     // 难以从/proc获取，留空
    std::string wchan;                // 若阻塞，内核等待的函数名 (requires kptr_restrict=0 or root)
    std::vector<std::string> call_stack; // 调用栈 (非常复杂，这里将是占位符)

    // 4. 调度与延迟
    // uint64_t scheduling_delay_ns;     // 难以从/proc获取
    uint64_t voluntary_context_switches;   // 自愿上下文切换次数
    uint64_t nonvoluntary_context_switches; // 非自愿上下文切换次数

    std::string state_to_string() const;
    std::string policy_to_string() const;
};

struct AggregateStats {
    size_t total_threads;
    std::map<ThreadState, size_t> threads_by_state;
    std::vector<int32_t> cpu_hot_thread_ids; // CPU占用高的线程ID列表 (按总CPU时间排序)
    // 可以在此添加更多聚合信息
};

class ThreadPlugin {
public:
    ThreadPlugin();
    ~ThreadPlugin();

    std::pair<std::vector<ThreadInfo>, AggregateStats> flush();

private:
    long clock_ticks_per_second_; // For converting jiffies to ms
    double get_process_uptime_seconds(long process_start_jiffies);
    
    // Helper to read /proc files
    static std::string read_file_to_string(const std::string& path);
    static std::vector<std::string> split_string(const std::string& s, char delimiter);
    static ThreadState char_to_thread_state(char c);
    static SchedulingPolicy int_to_sched_policy(int p);
};

#endif // THREAD_PLUGIN_H
