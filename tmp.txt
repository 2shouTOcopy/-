以下概要设计基于 2shouTOcopy/collect 仓库全部源代码（截至 2025-06-28 main 分支）。文档按照《系统收集模块概要设计模板》扩展，给出模块清单、接口、异常策略、性能与可扩展方案，并在每段末尾标注源码出处。

⸻

3 软件功能及模块划分

本节补充完整功能描述，引用具体实现要点。

3.2.1 配置管理模块
	•	功能：负责解析 collect.conf 与包含式文件（如 types.db），构造一棵 OConfigItem 配置树并为其他模块提供查询／热更新。解析入口位于 ConfigParser::parseFile ➜ parseStream → parseBlock 流程，支持字符串、数字、布尔三种值类型。 ￼
	•	接口：ConfigManager::get(key)、ConfigManager::getGlobalOption(key) 以及按节点枚举 API（后续详细设计）。
	•	特点：
	1.	使用 Any-cast 保存动态类型，避免 void*；
	2.	通过父指针维护层级关系，可在运行时递归下发插件私有段；
	3.	预留 inotify 热加载钩子，变更后向所有插件广播 config() 回调重载。

3.2.2 插件管理模块
	•	功能：动态加载/卸载 .so，调用插件生命周期函数并对外暴露统一分发入口。 ￼
	•	接口：
	•	ModuleLoader::Load(name,global) → dlopen + dlsym(CreateModule)；
	•	PluginService::initAll / readAllOnce / flushAll / shutdownAll; ￼ ￼
	•	dispatchValues / dispatchMultivalues 进行数据上报。
	•	特点：
	•	线程安全：公有方法包裹 std::mutex；
	•	插件基类 CAbstractUserModule 定义 12 个可选钩子（read / write / flush / shutdown ...）。 ￼
	•	插件文件名与 <plugin>.so 一致，CreateModule/DestroyModule 导出函数由编译规则自动生成。

3.2.3 调度模块
	•	功能：周期触发所有 reader-plugin 的 read()，将 value_list_t 投递至结果分发器。
	•	实现：当前版本内嵌在 PluginService::readAll() 主循环，以 sleep(interval) 简易定时；未来可替换为 ThreadPool+TimerWheel。
	•	异常控制：单插件超时仅熔断该实例，主循环继续。

3.2.4 数据采集插件
	•	目录：module/<name>/*.cpp；每个插件继承 CAbstractUserModule 并重写必要接口。
	•	已实现插件（见 3.3 列表）：
	•	cpu 读取 /proc/stat，支持百分比和绝对值两种输出； ￼
	•	memory 解析 /proc/meminfo 并支持 absolute / percentage 多值写出； ￼
	•	network 提供一次性诊断 flush()，整合 ip, netstat, arp 等命令； ￼
	•	uptime, df, thread, dmesg 等基础插件同目录。

3.2.5 数据处理与存储模块
	•	现状：读值直接进入 writer-plugin；暂无聚合／告警逻辑；
	•	预留：在 RstDispatcher::enqueue() 之后插入 filter chain 处理器列表。 ￼

3.2.6 数据输出插件
	•	实现：
	•	csv——将 value_list_t 落盘为分表 CSV；支持 stdout / stderr / file 三种模式； ￼
	•	logfile——面向诊断的纯文本输出（TODO）。
	•	特点：writer 插件仅需实现 write()，其余接口可空实现；由 RstDispatcher 统一异步调用，防止阻塞采集线程。

⸻

3.3 模块划分列表

编号	名称	形态	简述
PD-001	ModuleLoader	单例类	.so 动态装载、符号解析、实例缓存
PD-002	PluginService	单例类	插件生命周期协调、主循环调度、日志封装
PD-003	RstDispatcher	单例类	value_list_t 环形缓冲 + 工作线程异步写出
PD-004	ConfigManager	单例类	上层配置缓存与插件参数查询
PD-005	OConfigParser	组件类	collect.conf 解析器（递归下降）
PD-006	CpuModule	采集插件	读取 CPU 11 个状态字段，支持百分比
PD-007	MemoryModule	采集插件	解析 /proc/meminfo，支持多点/百分比
PD-008	NetworkModule	辅助插件	flush() 输出网卡诊断报告
PD-009	UptimeModule	采集插件	上报系统启动时长
PD-010	CsvModule	输出插件	value→CSV 落盘，支持文件/Stdout
PD-011	Utils	库	字符串、安全分配、格式化、时间工具
PD-012	collectd-main	可执行	整体守护进程入口与 CLI 解析


⸻

3.4 可测试性与维护
	1.	UT：对 ModuleLoader、PluginService、OConfigParser 编写 GoogleTest；使用 LD_PRELOAD mock dlopen/dlsym。
	2.	IT：Docker-based pipeline 模拟 /proc 和网络栈，跑 cpu/memory 真值比对。
	3.	CI：GitHub Actions 触发 make all && ctest，并运行 cppcheck + clang-tidy 规则。
	4.	日志：宏 ERROR/WARNING/INFO/DEBUG 注入日志等级，便于集中采集。 ￼

⸻

4 模块说明（示例）

4.1 PD-001 ModuleLoader

4.1.1 功能描述

ModuleLoader 负责在运行时寻找插件目录(SetDir)→拼接路径→调用 dlopen，随后通过 pfnCreateModule 创建实例并保存到 m_openLibs（std::map<std::string, LibInfo>）。线程安全由 m_mutex 保护。 ￼

4.1.2 关键数据结构

struct LibInfo {
  void*        handle;   // dlopen 句柄
  pfnCreateModule fnCreateOpt;
  pfnDestroyModule fnDestroyOpt;
  CAbstractUserModule* pUserModuleImpl;
};

GetLoadedPluginNames() 便于 CLI 展示当前已激活插件。

4.1.3 时序

main() ─┬─> ModuleLoader::Load("cpu")
        │       ├─ dlopen("cpu.so", RTLD_NOW)
        │       ├─ dlsym("CreateModule")
        │       └─ 插入 m_openLibs
        └─> PluginService::initAll()

其余 PD-002~PD-012 说明请在详细设计阶段展开，包括协作顺序图。

⸻

5 接口设计

5.1 外部（对主程序 / 插件作者公开）

接口	原型	说明
插件创建	extern "C" CAbstractUserModule* CreateModule();	返回派生实例；由 Macro 自动导出
采集回调	int read()	被调度器周期调用；返回 0 成功
数据分发	int PluginService::dispatchValues(const value_list_t*)	立即入队异步写出
写回调	int write(const data_set_t*, const value_list_t*)	writer 插件实现
热刷新	int flush()	支持诊断类插件一次性输出
配置查询	ConfigManager::get(key)	字符串接口，内部做类型转换

数据结构 value_list_t / data_set_t / notification_t 定义于 ModuleDef.h。 ￼

⸻

6 异常处理

场景	处理策略
dlopen 失败	Load() 返回 -1 并写 ERROR(...); 不影响继续加载其他插件
插件 read() 抛异常	捕获后计数并在调度层熔断；最多重试 N=3 次
队列满	RstDispatcher::enqueue 返回 EAGAIN；调度器记录丢包计数
I/O 错误（CSV 写盘）	写日志 + 返回 -1；数据行丢弃但不终止进程  ￼


⸻

7 性能优化
	1.	环形无锁队列：RstDispatcher 使用 std::vector<shared_ptr> + head/tail 原子索引，单写多读；减少锁冲突。 ￼
	2.	批量写：writer 插件支持连续 n 条聚合为一次 fwrite；CSV 中表现为 fprintf 批处理。
	3.	按需采集：对诊断型插件，仅在 SIGUSR1 调用 flush()，减少 CPU 消耗。
	4.	最小拷贝：value_list_t 上报时使用 shared_ptr 克隆函数 vl_clone()，避免大 struct 深拷贝。 ￼

⸻

8 可扩展性设计

方向	方案
新采集项	新建 module/foo/foo.cpp，继承基类，编译后放入 modules 目录并在 collect.conf 添加 LoadPlugin "foo"
新输出后端	实现 write() 将数据送至 Prometheus Pushgateway / InfluxDB Line-Protocol；无需改动调度器
配置热加载	在 ConfigManager 监听 inotify；触发后调用每插件 config() 更新
云端集中监控	追加 grpc_writer 插件，将 value_list_t 转 protobuf stream


⸻

结语

以上文档覆盖整体架构→核心模块→接口→异常→性能→扩展六大维度，并结合源码细节给出引用。可直接纳入项目 High-Level Design，后续如需类图或时序图，可进一步细化。