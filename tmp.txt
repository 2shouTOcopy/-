#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

/* 假设 mem_leak.h 中已经声明了以下结构和全局变量：
   struct mh_entry {
       struct cds_hlist_node hlist ;
       void *ptr ;
       size_t alloc_size ;
       void *alloc_caller_stack[STACK_DEPTH_MAX] ;
       int stack_depth ;
       char *caller_symbol ;
   } ;
   extern struct cds_hlist_head mh_table[MH_TABLE_SIZE] ;
*/

void print_leaks(void)
{
{
    FILE *fp = fopen("/mnt/leak_log", "a") ;
    if (!fp)
    {
    {
        perror("fopen") ;
        return ;
    }
    }

    static int show_cnt = 0 ;
    show_cnt++ ;

    time_t now = time(NULL) ;
    struct tm *tm_now = localtime(&now) ;
    char time_str[64] ;
    strftime(time_str, sizeof(time_str), "%m-%d %H:%M:%S", tm_now) ;

    unsigned long total_leak = 0 ;
    unsigned long total_mem = 0 ;
    unsigned long i ;
    char stack_str[512] ;

    /* 先计算总泄露内存（此处 total_mem 也用泄露内存作为示例） */
    for (i = 0 ; i < MH_TABLE_SIZE ; i++)
    {
    {
        struct cds_hlist_head *head = &mh_table[i] ;
        struct cds_hlist_node *node ;
        struct mh_entry *e ;
        cds_hlist_for_each_entry(e, node, head, hlist)
        {
        {
            total_leak += e->alloc_size ;
            total_mem += e->alloc_size ;
        }
        }
    }
    }

    /* 写入头部信息 */
    fprintf(fp, "********************show_cnt: %d********************\n", show_cnt) ;
    fprintf(fp, "record time: [%s]\n", time_str) ;
    fprintf(fp, "memleak use memory: (%lu) %luM\n\n", total_leak, total_leak / (1024 * 1024)) ;

    /* 写入泄露记录 */
    for (i = 0 ; i < MH_TABLE_SIZE ; i++)
    {
    {
        struct cds_hlist_head *head = &mh_table[i] ;
        struct cds_hlist_node *node ;
        struct mh_entry *e ;
        cds_hlist_for_each_entry(e, node, head, hlist)
        {
        {
            int j ;
            int offset = 0 ;
            memset(stack_str, 0, sizeof(stack_str)) ;
            for (j = 0 ; j < e->stack_depth ; j++)
            {
            {
                offset += snprintf(stack_str + offset,
                    sizeof(stack_str) - offset,
                    " %p",
                    e->alloc_caller_stack[j]) ;
            }
            }
            fprintf(fp, "[leak] ptr: %p size: %zu caller:%s <%s>\n",
            {
                e->ptr,
                e->alloc_size,
                stack_str,
                e->caller_symbol ? e->caller_symbol : "unknown"
            }) ;
        }
        }
    }
    }

    /* 写入尾部信息 */
    fprintf(fp, "\n") ;
    fprintf(fp, "total mem: %lu (%luM)\n", total_mem, total_mem / (1024 * 1024)) ;
    fprintf(fp, "********************show end********************\n\n") ;

    fclose(fp) ;
}
}