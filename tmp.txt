# toolchain file for ARM AArch64 (CA53) Linux with gnueabihf ABI

# This is the target system name, which should be Linux
set(CMAKE_SYSTEM_NAME Linux)

# This is the target processor architecture
set(CMAKE_SYSTEM_PROCESSor aarch64)

# Define the full path to your toolchain's bin directory
# Based on your provided information: /opt/aarch/aarch64-ca53-linux-gnueabihf-8.4/bin
set(TOOLCHAIN_BIN_DIR "/opt/aarch/aarch64-ca53-linux-gnueabihf-8.4/bin")

# Specify the cross compilers using the detected prefix
# The prefix is 'aarch64-ca53-linux-gnueabihf-'
set(CMAKE_C_COMPILER "${TOOLCHAIN_BIN_DIR}/aarch64-ca53-linux-gnueabihf-gcc")
set(CMAKE_CXX_COMPILER "${TOOLCHAIN_BIN_DIR}/aarch64-ca53-linux-gnueabihf-g++")
set(CMAKE_ASM_COMPILER "${TOOLCHAIN_BIN_DIR}/aarch64-ca53-linux-gnueabihf-gcc") # For assembly files if any

# Define the sysroot for the target system.
# This is where your target system's headers and libraries are located.
#
# IMPORTANT: YOU MUST VERIFY THIS PATH!
# It's commonly found at: <toolchain_root>/<target_triple>/sysroot/
# Or sometimes just: <toolchain_root>/sysroot/
#
# Based on '/opt/aarch/aarch64-ca53-linux-gnueabihf-8.4/bin',
# a common sysroot path would be:
set(CMAKE_FIND_ROOT_PATH "/opt/aarch/aarch64-ca53-linux-gnueabihf-8.4/aarch64-ca53-linux-gnueabihf/sysroot")

# Instruct CMake to search for programs in the host environment and
# for libraries/headers only in the target environment (sysroot).
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER) # Never look for programs in the sysroot
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)  # Only look for libraries in the sysroot
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)  # Only look for includes in the sysroot
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)  # Only look for packages in the sysroot

# Optional: if you need to pass specific compiler flags for the target architecture (e.g., for Cortex-A53)
# set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mcpu=cortex-a53" CACHE STRING "C Compiler Flags" FORCE)
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcpu=cortex-a53" CACHE STRING "C++ Compiler Flags" FORCE)

# This helps CMake find shared libraries correctly when cross-compiling
# Ensures that RPATH is not set to absolute paths on the host system,
# which would be incorrect for the target.
set(CMAKE_SKIP_INSTALL_RPATH TRUE)
set(CMAKE_BUILD_RPATH_USE_ORIGIN TRUE)

# Optionally, if your toolchain requires specific environment variables to be set,
# you might add them here, though CMAKE_TOOLCHAIN_FILE typically handles most needs.
# For example, if you had custom pkg-config paths for your target:
# set(ENV{PKG_CONFIG_PATH} "${CMAKE_FIND_ROOT_PATH}/usr/lib/pkgconfig:${CMAKE_FIND_ROOT_PATH}/usr/share/pkgconfig")
