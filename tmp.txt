#include <iostream>
#include <sstream>
#include <vector>
#include <iomanip>
#include <string>
#include <map>
#include <cstdint>

// 定义等级映射表
std::map<std::string, uint8_t> level_map = {
    {"0", 0x00}, {"1+", 0x01}, {"2+", 0x02}, {"3+", 0x03}, {"4+", 0x04}, {"5+", 0x05}, {"FF", 0xFF}
};

// 将试管号转换为四字节
std::vector<uint8_t> convertTubeNumber(int tubeNumber) {
    std::vector<uint8_t> tubeBytes;
    for (int i = 3; i >= 0; --i) {
        tubeBytes.push_back((tubeNumber >> (i * 8)) & 0xFF);
    }
    return tubeBytes;
}

// 将单组字符串转换为识别结果的十六进制数据
std::vector<uint8_t> parseRecognitionResult(const std::string &group) {
    std::vector<uint8_t> result;
    std::istringstream ss(group);
    std::string segment;

    // 以分号分割，获取每个部分
    while (std::getline(ss, segment, ';')) {
        if (segment == "null") {
            // 如果该项为 "null"，等级和置信度均为 0xFF
            result.push_back(0xFF);
            result.push_back(0xFF);
        } else {
            std::istringstream segmentStream(segment);
            std::string name, level, scoreStr;

            if (std::getline(segmentStream, name, '@') &&
                std::getline(segmentStream, level, '@') &&
                std::getline(segmentStream, scoreStr)) {

                uint8_t levelHex = level_map.count(level) ? level_map[level] : 0xFF;
                result.push_back(levelHex);

                try {
                    float score = std::stof(scoreStr);
                    uint8_t scoreHex = static_cast<uint8_t>(score);
                    result.push_back(scoreHex);
                } catch (...) {
                    result.push_back(0xFF);
                }
            }
        }
    }
    return result;
}

// 解析完整输入字符串
std::vector<uint8_t> parseInputString(const std::string &input) {
    std::vector<uint8_t> buf;
    std::istringstream ss(input);
    std::string segment;

    // 解析试管号
    std::getline(ss, segment, ';');
    int tubeNumber = std::stoi(segment);
    std::vector<uint8_t> tubeBytes = convertTubeNumber(tubeNumber);

    // 解析图像索引
    std::vector<int> imageIndices;
    for (int i = 0; i < 3; ++i) {
        std::getline(ss, segment, ';');
        imageIndices.push_back(std::stoi(segment));
    }

    // 解析各图像识别数据
    for (size_t i = 0; i < imageIndices.size(); ++i) {
        std::getline(ss, segment, ';');

        // 每组数据开头的标识符
        buf.push_back(0x85);

        // 插入试管号数据和图像索引
        buf.insert(buf.end(), tubeBytes.begin(), tubeBytes.end());
        buf.push_back(static_cast<uint8_t>(imageIndices[i]));

        // 插入识别结果
        std::vector<uint8_t> recognitionData = parseRecognitionResult(segment);
        buf.insert(buf.end(), recognitionData.begin(), recognitionData.end());

        // 每组数据的结束标识符
        buf.push_back(0xAA);
    }
    return buf;
}

// 输出结果
void printHexBuffer(const std::vector<uint8_t> &buffer) {
    for (uint8_t byte : buffer) {
        std::cout << "0x" << std::hex << std::setw(2) << std::setfill('0') << (int)byte << " ";
    }
    std::cout << std::dec << std::endl;
}

int main() {
    std::string input = "555;0;6;9;黄疸@1+@94.410004;null;null;null;脂血@2+@94.410004;null;null;null;溶血@3+@94.410004";
    std::vector<uint8_t> hexBuffer = parseInputString(input);

    // 输出结果
    printHexBuffer(hexBuffer);

    return 0;
}
