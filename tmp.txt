下面整理了一份「抓包常用语法速查表」，涵盖 tcpdump（命令行）和 Wireshark / TShark（图形界面 + CLI）在常见场景下最常用、最实用的指令与过滤写法，并附带简要说明。你可以直接复制到终端或 Wireshark 的 Filter 栏使用。

⸻

1  抓包基础概念

概念	tcpdump	Wireshark
捕获过滤器 (Capture Filter)	在 命令行直接写在 tcpdump 末尾；使用 BPF 语法，过滤的包 不会被写入 pcap	在 “Capture → Options → Capture Filter” 编写；同样是 BPF 语法
显示过滤器 (Display Filter)	n/a（tcpdump 只有捕获过滤）	抓到包后在 Wireshark 顶部 “Display Filter” 输入；语法更丰富，字段名更直观

BPF 过滤语法：host / net / port / proto / and / or / not
Wireshark 显示过滤：字段名（ip.addr, tcp.port …）+ 关系运算符(==, !=, &&, ||, matches, contains …)

⸻

2  tcpdump 常用选项速查

-i eth0          # 指定接口
-nn              # 不解析主机名、不解析端口名（提高速度）
-s 0             # 抓取完整数据，不截断
-X               # 同时以 HEX + ASCII 显示包体
-XX              # 再额外显示链路层头
-v / -vv / -vvv  # 递增详细度
-c 100           # 抓 100 包就退出
-w file.pcap     # 保存为 pcap（常与 -G / -W 分片一起用）
-r file.pcap     # 读 pcap 文件

组合范例
tcpdump -i eth0 -nn -s 0 -XX -w capture.pcap

⸻

3  常见过滤写法对照

需求	tcpdump 捕获过滤（BPF）	Wireshark 显示过滤
指定 IP	host 192.168.1.10	ip.addr == 192.168.1.10
指定子网	net 10.0.0.0/24	ip.addr == 10.0.0.0/24
指定端口	tcp port 80	tcp.port == 80
指定协议	udp / icmp / arp	udp / icmp / arp
多条件 AND	host 10.0.0.5 and tcp port 22	ip.addr==10.0.0.5 && tcp.port==22
多条件 OR	(tcp port 80 or 443)	tcp.port in {80 443} 或 `tcp.port == 80
排除条件	not port 22	!(tcp.port == 22)
IPv6 地址	ip6 host fe80::1	ipv6.addr == fe80::1
仅 SYN	tcp[tcpflags] & tcp-syn != 0	tcp.flags.syn == 1 && tcp.flags.ack == 0
包长度	less 512 / greater 1200	frame.len > 1200
VLAN ID 10	vlan 10	vlan.id == 10
指定 MAC	ether host aa:bb:cc:dd:ee:ff	eth.addr == aa:bb:cc:dd:ee:ff


⸻

4  典型场景示例

4.1 抓取某台服务器的 HTTP/HTTPS

# tcpdump
tcpdump -i eth0 -nn -s 0 tcp port 80 or 443 and host 203.0.113.5 -w web.pcap

Wireshark 抓完后输入显示过滤：

http || tls && ip.addr == 203.0.113.5

4.2 抓 DNS 解析

tcpdump -i any -nn udp port 53 -vvv

Wireshark 显示过滤：dns

4.3 抓指定进程发出的包（Linux）

sudo tcpdump -i any -nn -s 0 -w out.pcap 'tcp and port 12345' \
  --direction=outbound \
  --pid=<PID>
# --pid 需要较新的 tcpdump (>=4.99); 或者用 iptables owner 模块

4.4 持续轮转文件，每 5 分钟一份

tcpdump -i eth0 -G 300 -w 'capture-%Y%m%d%H%M%S.pcap'

4.5 只抓 TCP 三次握手

tcpdump -i eth0 'tcp[tcpflags] & (tcp-syn|tcp-ack) == tcp-syn'

4.6 抓包后立即查看（实时）

tcpdump -i eth0 -nn -s 0 -l -A 'port 80'
# -l: 让 stdout 变行缓冲，可管道到 grep/less

4.7 抓取本机发往公网的大包 (>1200B)

tcpdump -i eth0 'greater 1200 and src net 192.168.0.0/16 and dst net not 192.168.0.0/16'

4.8 抓取 TCP 重传

Wireshark 显示过滤：

tcp.analysis.retransmission || tcp.analysis.fast_retransmission


⸻

5  Wireshark 实用快捷键 & 技巧

动作	快捷键
开始 / 停止捕获	Ctrl + E
重新启动捕获	Ctrl + R
跳到下一/上一报错	Ctrl + → / Ctrl + ←
跟踪 TCP 流	选中包 → 右键 → Follow → TCP Stream
着色规则	View → Coloring Rules (自定义高亮)
“Expert Info” 总览	Ctrl + Shift + E
IO Graph	Statistics → IO Graph

提示：使用 “抓取过滤 + 显示过滤” 的双层过滤策略：
捕获过滤 先把垃圾包挡在 pcap 之外，显示过滤 再对剩余数据做精细分析，效率最高。

⸻

6  抓包调试小贴士
	1.	接口名称
Linux 用 ip link / ifconfig -a 查看；
Windows 在 tcpdump -D / Wireshark “Capture → Options” 可见。
	2.	权限
Linux 建议 sudo setcap cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump，免 root 运行。
	3.	丢包
高速抓包可加 --immediate-mode（tcpdump >=4.9）或在 Wireshark 的 Capture Options 勾选。
	4.	文件大小
长时间抓包务必用 -G+-w 滚动或 -C 按大小切片，避免单个 pcap 巨大导致难以分析。
	5.	与 tshark 联动
tshark -r big.pcap -Y 'tcp.port==1883 && mqtt' -T fields -e ip.src -e mqtt.topic
	6.	性能排查
抓包时 top 关注 %wa (IO wait)，磁盘写入慢同样会丢包；必要时使用更高性能的 ring‑buffer 工具 (e.g. pcap-ng, PF_RING, dpdk‑capture).

⸻

快捷备忘（10 秒内想好过滤语法）

who / where / how
主机/网段/端口 → and/or/not → 协议
先写 tcpdump 捕获过滤，再把主机、端口直接改成 ip.addr / tcp.port 放到 Wireshark 显示过滤即可。

⸻

把上面内容保存成 cheatsheet.md，再记住两条口诀：
	1.	“tcpdump 抓少量 + Wireshark 精过滤”
	2.	“Capture Filter 拦脏包，Display Filter 查真相”

这样大部分抓包场景都能快速上手、定位问题。祝调试顺利!