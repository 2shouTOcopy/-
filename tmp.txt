下面补全 4 模块说明，为设计文档提供每个核心模块的功能定位、关键数据结构、外部/内部接口、并发与依赖关系。阅读时可直接配合前文类图与时序图。

⸻

4 模块说明

4.1 PD-001 ModuleLoader 类

4.1.1 模块功能描述

运行期动态装载、卸载 .so 插件，对外暴露查询与实例句柄，保证整个监控框架的插件即插即用  ￼。

4.1.2 关键数据结构与成员

struct LibInfo {
  void*           handle;        // dlopen 句柄
  pfnCreateModule fnCreateOpt;   // 工厂
  pfnDestroyModule fnDestroyOpt; // 析构
  CAbstractUserModule* pUserModuleImpl;
};
std::map<std::string,LibInfo> m_openLibs;    // 已加载插件
std::vector<std::string>      m_loadPluginNames;
std::mutex                    m_mutex;

这些成员保证多线程环境下装载/卸载的一致性。 ￼

4.1.3 主要接口

接口	说明
SetDir(dir)	设置插件搜索目录
Load(name,global) / Unload(name)	装载/卸载单个插件
IsLoaded(name)	查询状态
GetUserModuleImpl(name)	获取已经实例化的插件指针

4.1.4 线程安全

所有公有方法均以 m_mutex 为粒度串行化，避免并发 dlopen/dlclose 导致崩溃。

4.1.5 交互

仅被 PluginService 调用；其他模块不直接依赖本类。

⸻

4.2 PD-002 PluginService 类

4.2.1 模块功能描述

系统级单例，负责插件生命周期统一编排、读写调度、日志封装与对外分发入口。 ￼

4.2.2 关键数据结构

内部以「插件名 → CAbstractUserModule*」哈希表缓存所有实例；没有公开成员，封装性好。

4.2.3 核心接口
	•	加载/卸载：load() / isLoaded() 调用 ModuleLoader。
	•	生命周期：initAll() → readAll() → flushAll() → shutdownAll()
	•	数据分发：dispatchValues()、dispatchMultivalues() —— 实际入队到 RstDispatcher。
	•	日志：log(int level,const char* fmt,…) —— 统一日志门面。 ￼

4.2.4 并发与时序
	•	读循环：主线程周期调用 readAll()；内部顺序遍历插件，防止资源冲突。
	•	写路径：只在 RstDispatcher 后台线程执行 write()，避免阻塞采集线程。

4.2.5 依赖

依赖 ModuleLoader 装载插件；依赖 RstDispatcher 推送结果；读取全局配置通过 ConfigManager。

⸻

4.3 PD-003 RstDispatcher 类

4.3.1 模块功能描述

结果异步分发器：维护一个无界双端队列，将采集线程产生的 value_list_t 交由后台线程批量写入所有 writer-plugin。 ￼ ￼

4.3.2 内部实现

struct Impl {
  std::deque<std::shared_ptr<value_list_t>> queue;
  std::mutex              mtx;
  std::condition_variable cv;
  std::thread             th;   // 后台消费线程
  std::atomic<bool>       exit;
};

后台线程循环 cv.wait()，取队列首元素后调用
PluginService::write(ds,vl) 完成真正落盘。 ￼

4.3.3 主要接口

接口	说明
enqueue(vl)	深拷贝 → 入队 → notify_one()
enqueueMultivalues(...)	批量展开多指标、可按百分比转换
flushAll()	等待队列清空
stop()	让后台线程安全退出

4.3.4 性能
	•	无锁环形缓冲可替换当前 deque + mutex。
	•	批量写接口显著减少系统调用开销。

⸻

4.4 PD-004 ConfigManager 类

4.4.1 模块功能描述

在启动阶段解析 collect.conf → 生成 OConfigItem 树；提供线程安全的键值查询与数据集 (types.db) 缓存。引用示例见 ConfigManager::Instance().GetDataSetByName() 在 RstDispatcher.cpp 中的调用。 ￼

4.4.2 接口概览

接口	说明
parse(conf)	调用 PD-005 完成解析
get(key) / getGlobalOption(key)	字符串返回
GetDataSetByName(type)	根据 types.db 查询指标描述
GetDefaultInterval()	缺省采集周期

4.4.3 热加载

预留 inotify 钩子，当文件变更时广播调用每个插件的 config()。

⸻

4.5 PD-005 OConfigParser 组件

4.5.1 功能

实现递归下降解析器，支持 Include、块嵌套与多值项，生成带父指针的配置树；位于 oconfig/oconfig.h/.cpp。 ￼

4.5.2 核心方法
	•	parseFile(const char*) / parseString(const char*)
	•	内部私有 parseStream → parseBlock 逐行处理
	•	工具函数 trim / stripQuotes / tokenizeLine

⸻

4.6 PD-006 CCpuModule 采集插件

4.6.1 功能

读取 /proc/stat，计算每 CPU 多种状态的计数差分或百分比，按需上报。支持 Guest/Steal 等扩展字段。 ￼

4.6.2 关键逻辑
	1.	stage()：对同一 CPU & State 进行增量计算。
	2.	aggregate()：计算全局活跃度。
	3.	commitDeriveRaw / commitPercentages：根据配置决定上报原始值或百分比。

⸻

4.7 PD-007 CMemoryModule 采集插件

4.7.1 功能

解析 /proc/meminfo，同时支持绝对值与百分比上报，并在 flush() 模式下输出MMZ 诊断信息到文件。 ￼

4.7.2 特点
	•	MemAvailable 等可选字段自动检测；
	•	兼容有/无详细 Slab 统计的内核；
	•	dispatchMultivalues 与 PluginService 高效对接。

⸻

4.8 PD-008 CNetworkModule 辅助插件

4.8.1 功能

在 flush() 时一次性抓取 ip, netstat, arp, ss 等命令输出，形成网络诊断包，便于现场问题分析（源码位于 module/network/，与 MemoryModule Flush 流程一致）。

⸻

4.9 PD-009 CUptimeModule 采集插件

4.9.1 功能

读取 sysinfo() 中 uptime 字段并上报系统启动时长 (gauge)；实现最简单，仅重写 read() 和 config()。

⸻

4.10 PD-010 CCsvModule 输出插件

4.10.1 功能

把 value_list_t 序列化为行级 CSV：
	•	支持 stdout / stderr / file 三种目标；
	•	路径支持按日期分级；
	•	可选 StoreRates 把 Counter/Derive 转实时速率。 ￼

4.10.2 并发安全

_ioMtx + flock() 双重保证同一文件无竞争。

⸻

4.11 PD-011 Utils 库

4.11.1 功能

提供跨平台安全工具函数：
	•	字符串安全拷贝 sstrncpy、动态分配封装 smalloc；
	•	format_values / format_name 把指标转字符串；
	•	进程辅助 get_pid_by_name()。 ￼

⸻

4.12 PD-012 collectd-main（进程入口）

4.12.1 功能

CLI 入口，解析命令行 & 配置 → 初始化 PluginService → 注册 SIGINT / SIGTERM / SIGUSR1：
	•	SIGUSR1 触发所有 flush-plugin 立即输出；
	•	后台守护模式下写 PID 文件到 BaseDir。

4.12.2 整体流程

main()
 ├─ ConfigManager::parse()
 ├─ PluginService::setDirectory()
 ├─ PluginService::load()  // 多次加载插件
 ├─ PluginService::initAll()
 └─ while(!stop) { PluginService::readAll(); sleep(interval); }


⸻

以上即补全后的模块说明。后续若新增插件或替换调度器实现，只需扩展相应 PD 编号条目并保持交互契约不变即可。