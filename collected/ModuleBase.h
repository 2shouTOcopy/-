#pragma once

/// \brief 抽象基类：用于描述一个插件（模块）需要实现的接口。
///
/// 每个插件都可以继承该类，重写自己需要的接口，
/// 不需要的接口则使用默认的空实现（直接返回0）。
///
/// 这样可实现：
/// - CPU 插件仅重写 init(), config(), read() 等
/// - 内存插件仅重写 read(), flush() 等
/// - …其他插件同理
class CAbstractUserModule {
public:
    /// 虚析构：确保派生类可被正确释放
    virtual ~CAbstractUserModule() {}

    //-------------------------------------------------------------------------
    // 1. config / complex_config
    //-------------------------------------------------------------------------
    /// \brief 解析配置的简单接口
    /// \return 0 表示成功，非 0 表示失败
    virtual int config() { return 0; }

    /// \brief 解析配置的复杂接口（与简单 config 区分开）
    virtual int complex_config() { return 0; }

    //-------------------------------------------------------------------------
    // 2. init
    //-------------------------------------------------------------------------
    /// \brief 插件初始化
    /// \return 0 表示成功，非 0 表示失败
    virtual int init() { return 0; }

    //-------------------------------------------------------------------------
    // 3. read / complex_read
    //-------------------------------------------------------------------------
    /// \brief 采集（或读取）数据的接口
    /// \return 0 表示成功
    virtual int read() { return 0; }

    /// \brief 更复杂的读取接口（可带 user_data 或自定义逻辑）
    /// \return 0 表示成功
    virtual int complex_read() { return 0; }

    //-------------------------------------------------------------------------
    // 4. write
    //-------------------------------------------------------------------------
    /// \brief 写数据接口（一般用于输出或存储）
    virtual int write() { return 0; }

    //-------------------------------------------------------------------------
    // 5. flush
    //-------------------------------------------------------------------------
    /// \brief 刷新接口（可写出缓存数据等）
    virtual int flush() { return 0; }

    //-------------------------------------------------------------------------
    // 6. missing
    //-------------------------------------------------------------------------
    /// \brief 处理“missing”数据或情况
    virtual int missing() { return 0; }

    //-------------------------------------------------------------------------
    // 7. cache_event
    //-------------------------------------------------------------------------
    /// \brief 处理 cache 事件
    virtual int cache_event() { return 0; }

    //-------------------------------------------------------------------------
    // 8. shutdown
    //-------------------------------------------------------------------------
    /// \brief 插件结束时的清理逻辑
    virtual int shutdown_module() { return 0; }

    //-------------------------------------------------------------------------
    // 9. data_set
    //-------------------------------------------------------------------------
    /// \brief 注册 / 管理 data_set 的接口
    virtual int data_set() { return 0; }

    //-------------------------------------------------------------------------
    // 10. log
    //-------------------------------------------------------------------------
    /// \brief 插件的日志逻辑（或将日志发送到某处）
    virtual int logmsg() { return 0; }

    //-------------------------------------------------------------------------
    // 11. notification
    //-------------------------------------------------------------------------
    /// \brief 处理或发送通知
    virtual int notification() { return 0; }
};